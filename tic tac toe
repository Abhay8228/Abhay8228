Tic Tac Toe AI

CODE:
import random

# Function to print the Tic-Tac-Toe board
def print_board(board):
    for row in board:
        print(" ".join(row))
    print()

# Function to check if a player has won
def check_winner(board, player):
    # Check rows
    for row in board:
        if all(cell == player for cell in row):
            return True

    # Check columns
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True

    # Check diagonals
    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):
        return True

    return False

# Function to check if the board is full
def is_board_full(board):
    return all(cell != ' ' for row in board for cell in row)

# Function to get the available moves
def get_available_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == ' ']

# Minimax algorithm with alpha-beta pruning
def minimax(board, depth, alpha, beta, maximizing_player):
    if check_winner(board, 'X'):
        return -1
    if check_winner(board, 'O'):
        return 1
    if is_board_full(board):
        return 0

    if maximizing_player:
        max_eval = float('-inf')
        for move in get_available_moves(board):
            board[move[0]][move[1]] = 'O'
            eval = minimax(board, depth + 1, alpha, beta, False)
            board[move[0]][move[1]] = ' '  # undo the move
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float('inf')
        for move in get_available_moves(board):
            board[move[0]][move[1]] = 'X'
            eval = minimax(board, depth + 1, alpha, beta, True)
            board[move[0]][move[1]] = ' '  # undo the move
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

# Function to find the best move for the AI player
def find_best_move(board):
    best_val = float('-inf')
    best_move = None
    for move in get_available_moves(board):
        board[move[0]][move[1]] = 'O'
        move_val = minimax(board, 0, float('-inf'), float('inf'), False)
        board[move[0]][move[1]] = ' '  # undo the move
        if move_val > best_val:
            best_val = move_val
            best_move = move
    return best_move

# Function to play Tic-Tac-Toe
def play_tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]

    while True:
        print_board(board)

        # Player's move
        while True:
            try:
                row = int(input("Enter row (0, 1, or 2): "))
                col = int(input("Enter column (0, 1, or 2): "))
                if board[row][col] == ' ':
                    board[row][col] = 'X'
                    break
                else:
                    print("Cell already occupied. Try again.")
            except ValueError:
                print("Please enter a valid number.")

        # Check if the player wins
        if check_winner(board, 'X'):
            print_board(board)
            print("You win! Congratulations!")
            break

        # Check if the board is full
        if is_board_full(board):
            print_board(board)
            print("It's a tie! The game is over.")
            break

        # AI's move
        print("AI's move:")
        ai_move = find_best_move(board)
        if ai_move:
            board[ai_move[0]][ai_move[1]] = 'O'
        else:
            # If Minimax fails to find a move, make a random move
            available_moves = get_available_moves(board)
            random_move = random.choice(available_moves)
            board[random_move[0]][random_move[1]] = 'O'

        # Check if the AI wins
        if check_winner(board, 'O'):
            print_board(board)
            print("AI wins! Better luck next time.")
            break

        # Check if the board is full
        if is_board_full(board):
            print_board(board)
            print("It's a tie! The game is over.")
            break

# Start the game
play_tic_tac_toe()





